install.packages("randomForest", repos="http://cran.us.r-project.org")
install.packages("kknn", repos="http://cran.us.r-project.org")
install.packages("gbm", repos="http://cran.us.r-project.org")
library(mlr)
library(dplyr)
library(readr)
setwd("/Users/agolotin/Desktop/BIO465/AnalysisExcercise/ex11")
setwd("/Users/agolotin/Desktop/BIO465/AnalysisExercise/ex11")
clinicalData <- as.data.frame(read_tsv("GSE38958_Clinical.txt"))
exprData <- as.data.frame(read_tsv("GSE38958_GeneExpression.txt"))
clinicalData$Ethnicity <- as.factor(clinicalData$Ethnicity)
clinicalData$Sex <- as.factor(clinicalData$Sex)
head(clinicalData)
head(exprData)
iris$Species <- as.character(iris$Species)
iris2 <- filter(iris, Species %in% c("virginica", "versicolor"))
# Create a task object that indicates which data will be used.
# It is also necessary to indicate which column contains the class (target) values.
task <- makeClassifTask(data = iris2, target = "Species")
# Create a learner object that indicates which classification algorithm we want to use.
# Also indicate that we want the algorithm to generate probabilistic predictions.
# In this example, we are using the Support Vector Machines (SVM) algorithm.
learner <- makeLearner("classif.svm", predict.type = "prob")
# Specify the resampling strategy.
# In this case, we indicate that we want to use cross-validation with 10 folds.
resampleDesc = makeResampleDesc("CV", iters = 10)
# Because cross validation relies on random assignments, set a random seed to
#   ensure that we will get consistent results across multiple executions.
set.seed(1)
# Make the predictions (combine the data with the algorithm and resampling strategy).
# By specifying "show.info=FALSE", we are telling mlr to only display important information
#   at the console.
results <- resample(learner, task, resampleDesc, show.info=FALSE)
results
results$pred
results$pred$data
results$pred$instance
results$pred$predict.type
results$pred$time
results$pred$task.desc
results$pred$threshold
crossValAnalysis <- function(data = inData,
targetColName = colName,
learnerAlgorithm = algorithm,
metrics = performMetrics)
{
task <- makeClassifTask(data = data, target = targetColName)
learner <- makeLearner(learnerAlgorithm, predict.type = "prob")
resampleDesc <- makeResampleDesc("CV", iters = 5)
set.seed(1)
results <- resample(learner, task, resampleDesc, show.info=FALSE)
performanceResult <- performance(results$pred, measures = mlr::metrics)
return (performanceResult)
}
View(clinicalData)
View(exprData)
head(exprData)
head(clinicalData)
svmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.svm", metrics = c(mlr::acc, auc))
crossValAnalysis <- function(data = inData,
targetColName = colName,
learnerAlgorithm = algorithm,
metricsToMeasure = performMetrics)
{
task <- makeClassifTask(data = data, target = targetColName)
learner <- makeLearner(learnerAlgorithm, predict.type = "prob")
resampleDesc <- makeResampleDesc("CV", iters = 5)
set.seed(1)
results <- resample(learner, task, resampleDesc, show.info=FALSE)
performanceResult <- performance(results$pred, measures = metricsToMeasure)
return (performanceResult)
}
svmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = c(mlr::acc, auc))
svmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = c(mlr::acc, auc))
svmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = list(mlr::acc, auc))
crossValAnalysis <- function(data = inData,
targetColName = colName,
learnerAlgorithm = algorithm,
metricsToMeasure = performMetrics)
{
task <- makeClassifTask(data = data, target = targetColName)
learner <- makeLearner(learnerAlgorithm, predict.type = "prob")
resampleDesc <- makeResampleDesc("CV", iters = 5)
set.seed(1)
results <- resample(learner, task, resampleDesc, show.info=FALSE)
performanceResult <- performance(results$pred, measures = list(mlr::acc, auc))
return (performanceResult)
}
svmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = list(mlr::acc, auc))
crossValAnalysis <- function(data = inData,
targetColName = colName,
learnerAlgorithm = algorithm,
metricsToMeasure = performMetrics)
{
task <- makeClassifTask(data = data, target = targetColName)
learner <- makeLearner(learnerAlgorithm, predict.type = "prob")
resampleDesc <- makeResampleDesc("CV", iters = 5)
set.seed(1)
results <- resample(learner, task, resampleDesc, show.info=FALSE)
performanceResult <- mlr::performance(results$pred, measures = metricsToMeasure)
return (performanceResult)
}
svmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = list(mlr::acc, auc))
svmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = list(mlr::acc, auc))
svmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = list(mlr::acc))
svmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = list(mlr::acc, mlr::auc))
svmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = list(mlr::auc))
install.packages("ROCKR")
install.packages("ROCR")
library(ROCR)
svmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = list(mlr::acc, auc))
metrics <- performance(results$pred, measures = list(mlr::acc, auc, tpr, tnr))
svmPerformanceExpr <- crossValAnalysis(data = exprData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = list(mlr::acc, auc))
svmPerformanceExpr
svmPerformanceExpr['acc']
svmPerformanceExpr['auc']
svmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = list(acc, auc))
svmPerformanceExpr <- crossValAnalysis(data = exprData, targetColName = "Class", learnerAlgorithm = "classif.svm", metricsToMeasure = list(acc, auc))
rfPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.randomForest", metricsToMeasure = list(acc, auc))
rfPerformanceExpr <- crossValAnalysis(data = exprData, targetColName = "Class", learnerAlgorithm = "classif.randomForest", metricsToMeasure = list(acc, auc))
nbPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.naiveBayes", metricsToMeasure = list(acc, auc))
nbPerformanceExpr <- crossValAnalysis(data = exprData, targetColName = "Class", learnerAlgorithm = "classif.naiveBayes", metricsToMeasure = list(acc, auc))
knnPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.kknn", metricsToMeasure = list(acc, auc))
knnPerformanceExpr <- crossValAnalysis(data = exprData, targetColName = "Class", learnerAlgorithm = "classif.kknn", metricsToMeasure = list(acc, auc))
gbmPerformanceClinical <- crossValAnalysis(data = clinicalData, targetColName = "Class", learnerAlgorithm = "classif.gbm", metricsToMeasure = list(acc, auc))
gbmPerformanceExpr <- crossValAnalysis(data = exprData, targetColName = "Class", learnerAlgorithm = "classif.gbm", metricsToMeasure = list(acc, auc))
max(svmPerformanceClinical['acc'], rfPerformanceClinical['acc'], nbPerformanceClinical['acc'], knnPerformanceClinical['acc'], gbmPerformanceClinical['acc'])
getMaxAlgorithm <- function(svm, rf, nb, knn, gbm) {
max_val <- max(svm, rf, nb, knn, gbm)
if (svm == max_val) {
return (paste("Support Vector Machine: ", max_val))
}
if (rf == max_val) {
return (paste("Random Forest: ", max_val))
}
if (nb == max_val) {
return (paste("Naive Bayes: ", max_val))
}
if (knn == max_val) {
return (paste("k-Nearest Neighbors: ", max_val))
}
if (gbm == max_val) {
return (paste("Gradient Boosting Machine: ", max_val))
}
}
getMaxAlgorithm(svmPerformanceClinical['acc'], rfPerformanceClinical['acc'], nbPerformanceClinical['acc'], knnPerformanceClinical['acc'], gbmPerformanceClinical['acc'])
getMaxAlgorithm(svmPerformanceExpr['acc'], rfPerformanceExpr['acc'], nbPerformanceExpr['acc'], knnPerformanceExpr['acc'], gbmPerformanceExpr['acc'])
getMaxAlgorithm(svmPerformanceClinical['auc'], rfPerformanceClinical['auc'], nbPerformanceClinical['auc'], knnPerformanceClinical['auc'], gbmPerformanceClinical['auc'])
getMaxAlgorithm(svmPerformanceExpr['acc'], rfPerformanceExpr['acc'], nbPerformanceExpr['acc'], knnPerformanceExpr['acc'], gbmPerformanceExpr['acc'])
getMaxAlgorithm(svmPerformanceClinical['acc'], rfPerformanceClinical['acc'], nbPerformanceClinical['acc'], knnPerformanceClinical['acc'], gbmPerformanceClinical['acc'])
```
getMaxAlgorithm(svmPerformanceExpr['acc'], rfPerformanceExpr['acc'], nbPerformanceExpr['acc'], knnPerformanceExpr['acc'], gbmPerformanceExpr['acc'])
getMaxAlgorithm(svmPerformanceClinical['auc'], rfPerformanceClinical['auc'], nbPerformanceClinical['auc'], knnPerformanceClinical['auc'], gbmPerformanceClinical['auc'])
getMaxAlgorithm(svmPerformanceExpr['auc'], rfPerformanceExpr['auc'], nbPerformanceExpr['auc'], knnPerformanceExpr['auc'], gbmPerformanceExpr['auc'])
str(exprData)
tail(exprData)
tail(str(exprData))
str(exprData)[10001]
