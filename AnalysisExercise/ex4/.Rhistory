source("https://bioconductor.org/biocLite.R")
biocLite("golubEsets")
library(golubEsets)
data(Golub_Train)
data(Golub_Merge)
ls()
class(Golub_Merge)
print(Golub_Merge)
print(Golub_Merge$class)
print(Golub_Merge$ExpressionSet)
print(Golub_Merge)
golubExpressionData <- exprs(Golub_Merge)
dim(golubExpressionData)
max(golubExpressionData)
max(golubExpressionData[1,])
max(golubExpressionData[,1])
max(golubExpressionData[1:5,1:5])
print(golubExpressionData["D64015_at",])
median(golubExpressionData["D64015_at",])
hist(golubExpressionData["D64015_at",])
hist(golubExpressionData["D64015_at",], xlab="Expression Level", ylab="Frequency", main="D64015_at gene")
golubPhenotypeData <- pData(Golub_Merge)
View(golubPhenotypeData)
print(golubPhenotypeData)
class(golubPhenotypeData)
allVsAml <- golubPhenotypeData$ALL.AML
print(allVsAml)
t.test(golubExpressionData["D64015_at",] ~ allVsAml)
D64015_pvalue <- t.test(golubExpressionData["D64015_at",] ~ allVsAml)$p.value
print(D64015_pvalue)
print(golubExpressionData)
t.test(golubExpressionData["AF001620_at",] ~ allVsAml)
t.test(golubExpressionData["AB003698_at",] ~ allVsAml)
install.packages("knitr")
install.packages("rmarkdown")
render("BIO_465_Analysis_Exercise_1_Answers.Rmd", "analysis_ex1.pdf")
render("BIO_465_Analysis_Exercise_1_Answers.Rmd", "analysis_ex1.pdf")
install.packages("rmarkdown::render")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'), repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
library("IRkernel")
r <- getOption('repos')
r$IRkernel <- 'http://irkernel.github.io/'
options(repos = r)
update.packages(repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
loadNamespace("IRkernel")
r <- getOption('repos')
IRkernel::installspec()
r$IRkernel::installspec()
IRkernel::installspec(user = FALSE)
install.packages("swirl")
library(swirl)
swirl()
Sys.Data()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit(0)
submit()
my_mean(c(4,5,10)
)
submit()
remainder(5)
remainder(11,5)
remainder
remainder(divisor = 11, nnum = 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate()
evaluate(mean, c(1.4, 3.6, 7.9, 8.8))
evaluate(st, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
evaluate(function(x){tail(x, 1)}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
sbumit()
submit()
submit()
telegram("klfjasdklf", "asdfas", "klgj")
submit()
mad_libs("Provo", "sit", "sdkaf")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
as.list(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
as.list(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
cls_vect
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- apply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, lengthj)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem){elem[2]})
summary(flags)
viewinfo(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sappy(flags, class)
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
sapply(flags$landmass, sum)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
class(names(plants))
head(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
letters
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
sample()
sample(1:2)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(mean = 10, sd = 25)
rnorm(x = 10, mean = 10, sd = 25)
rnorm(10, mean = 10, sd = 25)
rnorm(10, mean = 10, sd = 25)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rposi(5, 10)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclss(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, labels(x = Speed))
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
play()
dim(mtcars)
str(mtcars)
name(mtcars)
names(mtcars)
head(mtcars)
mtcars
nxt()
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
0
exit()
q()
?vapply
?tapply
q()
q()
install.packages("rmarkdown")
clear
clear()
cat("\014")
install.packages("readr")
install.packages("reshape2")
install.packages(“dplyr”)
install.packages("dplyr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
select(swabs4, c("swab.id", "location", "location2"))
library("stringr")
library("dplyr")
library("reshape2")
library("readr")
library("magrittr")
select(swabs4, c("swab.id", "location", "location2"))
select(swabs3, c("swab.id", "location", "location2"))
swabs2 <- swabs[swabs$type == "wall",]
setwd("/Users/agolotin/Desktop/BIO465/AnalysisExercise/ex4")
swabs <- read_tsv("swabs.tsv")
swabs2 <- swabs[swabs$type == "wall",]
swabs3 <- arrange(swabs2, xcor, ycor)
swabs4 <- swabs3[, c("swab.id", "location", "location2")]
select(swabs3, c("swab.id", "location", "location2"))
select(swabs3, which(swabs, c("swab.id", "location", "location2"))
;
select(swabs3, which(swabs, c("swab.id", "location", "location2")))
select(swabs3, which( colnames(swabs)==c("swab.id", "location", "location2") ))
swabs[swabs$type == "wall",] %>% arrange(xcor, ycor) %>% select(which(colnames(swabs)==c("swab.id", "location", "location2"))) %>% mutate(location_location2 = str_c(swabs4$location, "_", swabs4$location2))
swabs2 <- swabs[swabs$type == "wall",]
swabs2
swabs2 <- filter(swabs, type == "wall")
swabs2
unique(swabs[,"type"])
unique(select(swabs, "type")
;
unique(select(swabs, "type"))
unique(select(swabs, which(colnames(swabs) == "type")))
swabsOfInterest <- select(swabs, which(colnames(swabs) == "swab.id"))
swabsOfInterestCounts <- inner_join(swabsOfInterest, counts, by = "swab.id")
swabsOfInterestCounts <- inner_join(swabsOfInterest, counts)
counts <- read_tsv("counts.tsv")
swabsOfInterestCounts <- inner_join(swabsOfInterest, counts)
swabsOfInterestCounts <- inner_join(swabsOfInterest, counts, by = "swab.id")
meltedCounts <- melt(swabsOfInterestCounts[, 1-length(swabsOfInterestCounts)])
meltedCounts <- melt(swabsOfInterestCounts[, 2-length(swabsOfInterestCounts)])
meltedCounts
meltedCounts <- melt(swabsOfInterestCounts[, 1-length(swabsOfInterestCounts)])
meltedCounts
head(meltedCounts)
?melt
meltedCounts <- melt(swabsOfInterestCounts[, 2-length(swabsOfInterestCounts)])
head(meltedCounts)
meltedCounts <- melt(swabsOfInterestCounts, "swab.id"
)
head(meltedCounts)
swabsOfInterestCounts
meltedCounts <- melt(swabsOfInterestCounts, "swab.id")
head(meltedCounts)
