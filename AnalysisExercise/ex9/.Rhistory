setwd("/Users/agolotin/Desktop/BIO465/AnalysisExercise/ex9")
source("https://bioconductor.org/biocLite.R")
biocLite("GSEABase")
library(GSEABase)
library(readr)
library(plyr)
tpmERP <- read_delim("ERP001458.tpm", delim = "\t")
phenoERP <- read_delim("ERP001458.pheno", delim = "\t")
deseqERP <- read_delim("ERP001458.deseq", delim = "\t")
gageERP <- read_delim("ERP001458.gage", delim = "\t")
geneSetDatabase <- getGmt("c2.cp.reactome.v4.0.symbols.gmt")
gene_set_name <- NULL
p_val <- NULL
# Loop through each gene set
for (geneSetName in names(geneSetDatabase))
{
# Create a variable that indicates which genes are associated with this gene set
geneSetGenes <- as.character(unlist(geneIds(geneSetDatabase[geneSetName])))
deseqGeneSet <- deseqERP[which(as.character(unlist(deseqERP[,1])) %in% geneSetGenes),]
# Get all of the p-values for the gene set
pVals <- deseqGeneSet[,which(colnames(deseqGeneSet) == "pvalue")]
pAvg <- sum(pVals, na.rm = TRUE) / length(pVals)
gene_set_name <- c(gene_set_name, geneSetName)
p_val <- c(p_val, pAvg)
}
newGageData <- data.frame(gene_set_name, p_val)
scale(newGageData[1:20,1])
scale(newGageData[1:20,])
scale(newGageData[1:20,2])
scale(newGageData[1:20,2])
install.packages("recommenderlab")
normalize(newGageData)
normalize(newGageData[,2])
geneSetGenes <- as.character(unlist(geneIds(geneSetDatabase["REACTOME_TRANSLATION"])))
deseqGeneSet <- deseqERP[which(as.character(unlist(deseqERP[,1])) %in% geneSetGenes),]
geneSetGenes <- as.character(unlist(geneIds(geneSetDatabase["REACTOME_TRANSLATION"])))
geneSetGenes <- as.character(unlist(geneIds(geneSetDatabase["REACTOME_TRANSLATION"])))
geneSetGenes <- as.character(unlist(geneIds(geneSetDatabase["REACTOME_TRANSLATION"])))
tmpSetExpression <- tmp[which(as.character(unlist(tmp)))]
tmpSetExpression <- tmp[which(as.character(unlist(tpmERP[,1])) %in% geneSetGenes)]
tmpSetExpression <- tpmERP[which(as.character(unlist(tpmERP[,1])) %in% geneSetGenes)]
tmpSetExpression <- tpmERP[which(as.character(unlist(tpmERP[,1])) %in% geneSetGenes),]
tmpSetExpression
length(tmpSetExpression)
tpmSetExpression <- tpmERP[which(as.character(unlist(tpmERP[,1])) %in% geneSetGenes),]
cases <- tpmSetExpression[2:5]
cases
contols <- tpmSetExpression[6:9]
controls <- tpmSetExpression[6:9]
length(controls)
dim(controls)
dim(tpmSetExpression)
length(geneSetGenes)
dim(geneSetGenes)
class(geneSetGenes)
tpmSetExpression <- tpmERP[as.character(unlist(tpmERP[,1])) %in% geneSetGenes,]
dim(tpmSetExpression)
t.test()
?t.test
t.test(cases, controls)
t.test(cases, controls)$p-value
t.test(cases, controls)$p_value
t.test(cases, controls)$p
t <- t.test(cases, controls)
t.test(cases, controls)$p.value
gene_set_name <- NULL
p_val <- NULL
# This is not a simple method
for (geneSetName in names(geneSetDatabase))
{
# Create a variable that indicates which genes are associated with this gene set
geneSetGenes <- as.character(unlist(geneIds(geneSetDatabase[geneSetName])))
tpmSetExpression <- tpmERP[as.character(unlist(tpmERP[,1])) %in% geneSetGenes, ]
cases <- tpmSetExpression[2:5]
controls <- tpmSetExpression[6:9]
pValue <- t.test(cases, contols)$p.value
gene_set_name <- c(gene_set_name, geneSetName)
p_val <- c(p_val, pValue)
}
newGageData <- data.frame(gene_set_name, p_val)
newGageData <- arrange(newGageData, p_val)
intersect(as.character(unlist(newGageData[1:20,1])), as.character(unlist(gageERP[1:20,1])))
View(newGageData)
View(newGageData)
as.character(unlist(newGageData[1:20,1])) %in% as.character(unlist(gageERP[1:20,1]))
which(as.character(unlist(newGageData[1:20,1])) %in% as.character(unlist(gageERP[1:20,1])))
is.element(as.character(unlist(newGageData[1:20,1])), as.character(unlist(gageERP[1:20,1])))
View(newGageData)
gene_set_name <- NULL
p_val <- NULL
# This is not a simple method
for (geneSetName in names(geneSetDatabase))
{
# Create a variable that indicates which genes are associated with this gene set
geneSetGenes <- as.character(unlist(geneIds(geneSetDatabase[geneSetName])))
tpmSetExpression <- tpmERP[as.character(unlist(tpmERP[,1])) %in% geneSetGenes, ]
cases <- tpmSetExpression[2:5]
controls <- tpmSetExpression[6:9]
pValue <- t.test(cases, controls)$p.value
gene_set_name <- c(gene_set_name, geneSetName)
p_val <- c(p_val, pValue)
}
newGageData <- data.frame(gene_set_name, p_val)
newGageData <- arrange(newGageData, p_val)
View(newGageData)
View(newGageData)
is.element(as.character(unlist(newGageData[1:20,1])), as.character(unlist(gageERP[1:20,1])))
which(is.element(as.character(unlist(newGageData[1:20,1])), as.character(unlist(gageERP[1:20,1]))))
which(as.character(unlist(newGageData[1:20,1])) %in% as.character(unlist(gageERP[1:20,1])))
which(as.character(unlist(gageERP[1:20,1])) %in% as.character(unlist(newGageData[1:20,1])))
gageERP[which(as.character(unlist(gageERP[1:20,1])) %in% as.character(unlist(newGageData[1:20,1]))),]
newGageData[which(as.character(unlist(newGageData[1:20,1])) %in% as.character(unlist(gageERP[1:20,1]))),]
View(newGageData)
View(newGageData)
newGageData[which(as.character(unlist(newGageData[1:20,1])) %in% as.character(unlist(gageERP[1:20,1]))),]
ngd20 <- as.character(unlist(newGageData[1:20,]))
g20 <- as.character(unlist(gageERP[1:20,]))
newGageData[ndg20 %in% g20][1:2,]
newGageData[ngd20 %in% g20][1:2,]
newGageData[ngd20 %in% g20]
newGageData[ngd20 %in% g20,]
newGageData[ngd20[,1] %in% g20[,1]]
newGageData[ngd20[,1] %in% g20[,1]]
ngd20 <- as.character(unlist(newGageData[1:20,1]))
g20 <- as.character(unlist(gageERP[1:20,1]))
newGageData[ndg20 %in% g20][1:2,]
newGageData[ndg20 %in% g20]
newGageData[ngd20 %in% g20][1:2,]
newGageData[ngd20 %in% g20]
ngd20
newGageData[intersect(ngd20, g20)]
newGageData[ngd20 %in% g20,]
newGageData[ngd20 %in% g20,]
ngd20 %in% g20
dim(newGageData[ngd20 %in% g20,])
ngd20[ngd20 %in% g20,]
ngd20[ngd20 %in% g20]
newGageData[1:20,][ngd20 %in% g20,]
gageERP[1:20,1:2][g20 %in% ngd20,]
gene_set_name <- NULL
p_val <- NULL
# This is not a simple method
for (geneSetName in names(geneSetDatabase))
{
# Create a variable that indicates which genes are associated with this gene set
geneSetGenes <- as.character(unlist(geneIds(geneSetDatabase[geneSetName])))
tpmSetExpression <- tpmERP[as.character(unlist(tpmERP[,1])) %in% geneSetGenes, ]
cases <- tpmSetExpression[2:5]
controls <- tpmSetExpression[6:9]
pValue <- t.test(cases, controls)$p.value
gene_set_name <- c(gene_set_name, geneSetName)
p_vals <- c(p_vals, pValue)
}
gene_set_name <- NULL
p_vals <- NULL
# This is not a simple method
for (geneSetName in names(geneSetDatabase))
{
# Create a variable that indicates which genes are associated with this gene set
geneSetGenes <- as.character(unlist(geneIds(geneSetDatabase[geneSetName])))
tpmSetExpression <- tpmERP[as.character(unlist(tpmERP[,1])) %in% geneSetGenes, ]
cases <- tpmSetExpression[2:5]
controls <- tpmSetExpression[6:9]
pValue <- t.test(cases, controls)$p.value
gene_set_name <- c(gene_set_name, geneSetName)
p_vals <- c(p_vals, pValue)
}
