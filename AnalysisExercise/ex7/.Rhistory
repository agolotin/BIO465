source("https://bioconductor.org/biocLite.R")
biocLite("golubEsets")
library(golubEsets)
data(Golub_Train)
data(Golub_Merge)
ls()
class(Golub_Merge)
print(Golub_Merge)
print(Golub_Merge$class)
print(Golub_Merge$ExpressionSet)
print(Golub_Merge)
golubExpressionData <- exprs(Golub_Merge)
dim(golubExpressionData)
max(golubExpressionData)
max(golubExpressionData[1,])
max(golubExpressionData[,1])
max(golubExpressionData[1:5,1:5])
print(golubExpressionData["D64015_at",])
median(golubExpressionData["D64015_at",])
hist(golubExpressionData["D64015_at",])
hist(golubExpressionData["D64015_at",], xlab="Expression Level", ylab="Frequency", main="D64015_at gene")
golubPhenotypeData <- pData(Golub_Merge)
View(golubPhenotypeData)
print(golubPhenotypeData)
class(golubPhenotypeData)
allVsAml <- golubPhenotypeData$ALL.AML
print(allVsAml)
t.test(golubExpressionData["D64015_at",] ~ allVsAml)
D64015_pvalue <- t.test(golubExpressionData["D64015_at",] ~ allVsAml)$p.value
print(D64015_pvalue)
print(golubExpressionData)
t.test(golubExpressionData["AF001620_at",] ~ allVsAml)
t.test(golubExpressionData["AB003698_at",] ~ allVsAml)
install.packages("knitr")
install.packages("rmarkdown")
render("BIO_465_Analysis_Exercise_1_Answers.Rmd", "analysis_ex1.pdf")
render("BIO_465_Analysis_Exercise_1_Answers.Rmd", "analysis_ex1.pdf")
install.packages("rmarkdown::render")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'), repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
library("IRkernel")
r <- getOption('repos')
r$IRkernel <- 'http://irkernel.github.io/'
options(repos = r)
update.packages(repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
loadNamespace("IRkernel")
r <- getOption('repos')
IRkernel::installspec()
r$IRkernel::installspec()
IRkernel::installspec(user = FALSE)
install.packages("swirl")
library(swirl)
swirl()
Sys.Data()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit(0)
submit()
my_mean(c(4,5,10)
)
submit()
remainder(5)
remainder(11,5)
remainder
remainder(divisor = 11, nnum = 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate()
evaluate(mean, c(1.4, 3.6, 7.9, 8.8))
evaluate(st, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
evaluate(function(x){tail(x, 1)}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
sbumit()
submit()
submit()
telegram("klfjasdklf", "asdfas", "klgj")
submit()
mad_libs("Provo", "sit", "sdkaf")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
as.list(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
as.list(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
cls_vect
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- apply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, lengthj)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem){elem[2]})
summary(flags)
viewinfo(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sappy(flags, class)
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
sapply(flags$landmass, sum)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
class(names(plants))
head(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
letters
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
sample()
sample(1:2)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(mean = 10, sd = 25)
rnorm(x = 10, mean = 10, sd = 25)
rnorm(10, mean = 10, sd = 25)
rnorm(10, mean = 10, sd = 25)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rposi(5, 10)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclss(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, labels(x = Speed))
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
play()
dim(mtcars)
str(mtcars)
name(mtcars)
names(mtcars)
head(mtcars)
mtcars
nxt()
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
0
exit()
q()
?vapply
?tapply
q()
q()
install.packages("rmarkdown")
clear
clear()
cat("\014")
install.packages("readr")
install.packages("reshape2")
install.packages(“dplyr”)
install.packages("dplyr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
byuHair <- c(0.54, 0.75, 2.45, 4.23, 0.00, 1.21, 1.98, 5.54, 0.15, 2.67, 0.00, 1.98, 1.34, 4.31, 2.22, 0.99)
utahHair <- c( 1.11, 10.5, 4.06, 7.92, 0.21, 1.54, 0.00, 0.25, 2.95, 5.42, 0.55, 3.88, 15.2, 1.33, 1.44, 6.65)
```{r}
t.test(byuHair, utahHair)
tStatistic <- t.test(byuHair, utahHair)$statistic
pValue <- t.test(byuHair, utahHair)$p.value
calculatePValue <- function(tStatistic, x, y)
{
# Calculate the length of x and y
nx <- length(x)
ny <- length(y)
# Calculate the variance of x and y
vx <- var(byuHair)
vy <- var(utahHair)
# Calculate the standard errors of x and y
stderrx <- sqrt(vx/nx)
stderry <- sqrt(vy/ny)
# Calculate the combined standard error
stderr <- sqrt(stderrx^2 + stderry^2)
# Calculate the degrees of freedom
df <- stderr^4/(stderrx^4/(nx - 1) + stderry^4/(ny - 1))
# Calculate the p-value
pval <- 2 * pt(-abs(tStatistic), df)
return(pval)
}
calculatePValue(tStatistic, byuHair, utahHair)
mean(byuHair, utahHair)
mean(byuHair)
mean(byuHair) + mean(utahHair)
c(mean(byuHair), mean(utahHair))
combinedMean <- c(mean(byuHair), mean(utahHair))
byuMean <- mean(byuHair)
utahMean <- mean(utahHair)
byuHair
byuMean
byuHair - byuMean
normalizedUtahHair <- byuHair - byuMean
normalizedBYUHair <- byuHair - byuMean
normalizedUtahHair <- utahHair - utahMean
combinedMean <- mean(byuHair) + mean(utahHair)
combinedMean + normalizedBYUHair
combinedMean + normalizedUtahHair
combinedMean <- mean(byuHair + utahHair)
combinedMean <- mean(c(byuHair, utahHair))
combinedMean + normalizedBYUHair
combinedMean + normalizedUtahHair
N1 = length(combinedMean + normalizedBYUHair)
N2 = length(combinedMean + normalizedUtahHair)
set.seed(1)
tTestStatistic <- NULL
for (i in 1:1000) {
newSampleBYU <- sample(normalizedBYUHair, N1, replace = TRUE)
newSampleUtah <- sample(normalizedUtahHair, N2, replace = TRUE)
tTestStatistic <- c(tTestStatistic, t.test(newSampleBYU, newSampleUtah)$statistic)
}
tTestStatistic
length(tTestStatistic)
sd(tTestStatistic)
?sd
standardDev <- sd(tTestStatistic)
t.test(byuHair - 2 * standardDev, utahHair - 2 * standardDev)
t.test(byuHair + 2 * standardDev, utahHair + 2 * standardDev)
t.test(byuHair - 2 * standardDev, utahHair - 2 * standardDev)$statistic
t.test(normalizedBYUHair - 2 * standardDev, normalizedUtahHair - 2 * standardDev)
t.test(normalizedBYUHair - 2 * standardDev, normalizedUtahHair - 2 * standardDev)$statistic
t.test(normalizedBYUHair - standardDev, normalizedUtahHair - standardDev)$statistic
t.test(normalizedBYUHair - 2 * standardDev, normalizedUtahHair - 2 * standardDev)$statistic
t.test(normalizedBYUHair + 2 * standardDev, normalizedUtahHair + 2 * standardDev)$statistic
t.test(normalizedBYUHair - 2 * standardDev, normalizedUtahHair - 2 * standardDev)$statistic
a <- aov(byuHair - 2 * standardDev ~ utahHair - 2 * standardDev)
tStatistic - 2 * standardDev
tStatistic + 2 * standardDev
lowerT <- tStatistic - 2 * standardDev
upperT <- tStatistic + 2 * standardDev
calculatePValue(lowerT, byuHair, utahHair)
upperP
t.test(c(byuHair, utahHair))$statistic
tStatistic <- t.test(byuHair, utahHair)$statistic
tStatistic
plot(byuHair)
plot(byuHair, utahHair, type="l")
plot(byuHair, utahHair, type="l", lwd=1)
plot(byuHair)
plot(utahHair)
plot(byuHair)
plot(utahHair)
plot(byuHair)
combinedMean <- mean(c(byuHair, utahHair))
byuMean <- mean(byuHair)
utahMean <- mean(utahHair)
v
normalizedBYUHair <- byuHair - byuMean
normalizedUtahHair <- utahHair - utahMean
normalizedUtahHair
set.seed(1)
tTestStatistic <- NULL
for (i in 1:1000) {
newSampleBYU <- sample(normalizedBYUHair, N1, replace = TRUE)
newSampleUtah <- sample(normalizedUtahHair, N2, replace = TRUE)
tTestStatistic <- c(tTestStatistic, t.test(newSampleBYU, newSampleUtah)$statistic)
}
standardDev <- sd(tTestStatistic)
standardDev
lowerT <- tStatistic - 2 * standardDev
upperT <- tStatistic + 2 * standardDev
install.packages("plink", repos = "http://www2.uaem.mx/r-mirror")
library("plink")
library("readr")
library("ggplot2")
library("dplyr")
setwd("/Users/agolotin/Desktop/BIO465/AnalysisExercise/ex7")
sampleData <- read_tsv("SampleInfo.txt")
chr22Data <- read_tsv("chr22.HIGH.variants.txt")
chrXData <- read_tsv("chrX.HIGH.variants.txt")
sampleData2 <- filter(sampleData, Population %in% c("CEU", "YRI", "GWD", "ASW", "GBR", "TSI", "CHS", "JPT"))
chr22Data2 <- filter(chr22Data, SampleID %in% sampleData2$SampleID)
chr22Data2 <- as.matrix(select(chr22Data2, -SampleID))
chr22PC <- prcomp(chr22Data2)
chr22PCDF <- as.data.frame(chr22PC$x)
ggplot(chr22PCDF, aes(x=PC1, y=PC2)) +
geom_point(aes(color=sampleData2$Population)) +
labs(col="1000G Project\nPopulation") +
theme(legend.position="bottom", legend.background=element_rect(colour="black", fill="gray93"), panel.background=element_rect(fill="gray97"))
sampleData2 <- filter(sampleData, Population %in% c("CEU", "YRI", "GWD", "ASW", "GBR", "TSI", "CHS", "JPT"))
chrXData2 <- filter(chrXData, SampleID %in% sampleData2$SampleID)
chrXData2 <- as.matrix(select(chrXData2, -SampleID))
chrXPC <- prcomp(chrXData2)
# Plotting
chrXPCDF <- as.data.frame(chrXPC$x)
ggplot(chrXPCDF, aes(x=PC1, y=PC2)) +
geom_point(aes(color=sampleData2$Gender)) +
labs(col="1000G Project\nGender") +
theme(legend.position="bottom", legend.background=element_rect(colour="black", fill="gray93"), panel.background=element_rect(fill="gray97"))
chr22PCDF <- as.data.frame(chr22PC$x)
ggplot(chr22PCDF, aes(x=PC1, y=PC2)) +
geom_point(aes(color=sampleData2$Population)) +
labs(col="1000G Project\nPopulation") +
theme(legend.position="bottom", legend.background=element_rect(colour="black", fill="gray93"), panel.background=element_rect(fill="gray97"))
chrXPCDF <- as.data.frame(chrXPC$x)
ggplot(chrXPCDF, aes(x=PC1, y=PC2)) +
geom_point(aes(color=sampleData2$Gender)) +
labs(col="1000G Project\nGender") +
theme(legend.position="bottom", legend.background=element_rect(colour="black", fill="gray93"), panel.background=element_rect(fill="gray97"))
# Get only CEU families
familiesCEUData <- filter(sampleData, Population == "CEU") #%>% filter(FamilyID %in% unique(FamilyID)[1:10]) I wanted to do only 10 families at first...
# Get the genetic data on all of the families for both chromosomes
chrXCEU <- as.matrix(select(filter(chrXData, SampleID %in% familiesCEUData$SampleID), -SampleID))
chr22CEU <- as.matrix(select(filter(chr22Data, SampleID %in% familiesCEUData$SampleID), -SampleID))
# Calculate PCA
DFchrXCEU <- as.data.frame(prcomp(chrXCEU)$x)
DFchr22CEU <- as.data.frame(prcomp(chr22CEU)$x)
# Plot the data for both chromosomes
ggplot(DFchrXCEU, aes(PC1, PC2)) + geom_point(aes(color=familiesCEUData$FamilyID)) +
geom_point(data=DFchr22CEU, aes(color=familiesCEUData$FamilyID)) +
geom_density2d(alpha=0.5) +
guides(col = guide_legend(ncol=12, title="Unique Family Identifier", title.position="top")) +
theme(legend.position="bottom", legend.background=element_rect(colour="black", fill="gray93"), panel.background=element_rect(fill="gray97"))
